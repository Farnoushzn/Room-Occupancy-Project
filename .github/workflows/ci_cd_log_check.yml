name: CI/CD Pipeline for Room Occupancy ML Project

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Job 1: Build, Test, and Push Training Pipeline
  training_pipeline:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write  # Explicitly grant write permission to packages
    steps:
      # Step 1: Check out the repository to work with
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'

      # Step 3: Install dependencies for running the training script
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Step 4: Set lowercase repository name (to avoid Docker tag issues)
      - name: Set lowercase repository name
        id: repository_name
        run: |
          REPO_NAME="${{ github.repository }}"
          REPO_NAME_LOWER=$(echo "$REPO_NAME" | tr '[:upper:]' '[:lower:]')
          echo "REPO_NAME_LOWER=$REPO_NAME_LOWER" >> $GITHUB_ENV

      # Step 5: Log in to GitHub Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Step 6: Build and Push Training Image
      - name: Build and Push Training Image
        env:
          REPO_NAME_LOWER: ${{ env.REPO_NAME_LOWER }}
        run: |
          docker build -f Docker/Dockerfile.training -t ghcr.io/${REPO_NAME_LOWER}/room-occupancy-training:latest .
          docker push ghcr.io/${REPO_NAME_LOWER}/room-occupancy-training:latest

      # Step 7: Run the Training Container and Save Model
      - name: Run Training and Save Model
        run: |
          docker run --name room-occupancy-training-container ghcr.io/${REPO_NAME_LOWER}/room-occupancy-training:latest
          docker cp room-occupancy-training-container:/app/Models/xgb_occupancy_model.pkl ./Models/xgb_occupancy_model.pkl
          docker cp room-occupancy-training-container:/app/Models/training_log.txt ./Models/training_log.txt

      # Step 8: Create a Separate Container for Testing the Model Training
      - name: Test Trained Model in Separate Container
        run: |
          # Run a new container from the training image to verify model and log
          docker run --name room-occupancy-testing-container ghcr.io/${REPO_NAME_LOWER}/room-occupancy-training:latest bash -c "\
            if [ -f /app/Models/xgb_occupancy_model.pkl ]; then \
              echo 'Model file found. Proceeding with log validation.'; \
            else \
              echo 'Error: Model file not found.'; exit 1; \
            fi \
            && if grep -q 'Validation ROC AUC Score' /app/Models/training_log.txt; then \
              echo 'Log validation successful. Training metrics found in log.'; \
            else \
              echo 'Error: Training log does not contain expected metrics.'; exit 1; \
            fi"

      # Step 9: Commit and Push the Model to the Repository
      - name: Commit and Push Trained Model
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add Models/xgb_occupancy_model.pkl Models/training_log.txt
          git commit -m "Add trained model and training log"
          git push

      # Step 10: Upload Training Log as an Artifact (Retain Historical Logs)
      - name: Upload Training Log
        uses: actions/upload-artifact@v2
        with:
          name: training-log
          path: ./Models/training_log.txt

  # Job 2: Build, Test, and Push API Endpoint Service
  api_endpoint:
    runs-on: ubuntu-latest
    needs: training_pipeline
    permissions:
      contents: read
      packages: write
    steps:
      # Step 1: Check out the repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Log in to GitHub Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Step 3: Build and Push API Image
      - name: Build and Push API Image
        env:
          REPO_NAME_LOWER: ${{ env.REPO_NAME_LOWER }}
        run: |
          docker build -f Docker/Dockerfile.api -t ghcr.io/${REPO_NAME_LOWER}/room-occupancy-api:latest .
          docker push ghcr.io/${REPO_NAME_LOWER}/room-occupancy-api:latest
          
      # Step 4: Test the API Endpoint
      # - name: Test API Endpoint
      #   run: |
      #     docker run -d -p 5000:5000 --name room-occupancy-api ghcr.io/${{ env.REPO_NAME_LOWER }}/room-occupancy-api:latest
      #     sleep 15 # Allow time for the API to start
      #     curl -X POST "http://localhost:5000/predict" -H "Content-Type: application/json" -d '{"Temperature": 23.18, "Humidity": 27.272, "Light": 426, "CO2": 721.25, "HumidityRatio": 0.00479298817650529, "hour_17": 1, "day_of_week_3": 1, "month_2": 1}'


      # Step 4: Run the API container in detach mode
      - name: Run API Container
        run: |
          docker run -d -p 5000:5000 --name room-occupancy-api ghcr.io/${REPO_NAME_LOWER}/room-occupancy-api:latest
        # Note: Detach mode (-d) runs the container in the background

      # Step 5: Install dependencies for testing
      - name: Install Dependencies for Testing
        run: |
          python -m pip install requests  # Make sure requests is installed to run Prediction_req.py

      # Step 6: Test the API using the provided Python script
      - name: Test the API using Prediction_req.py
        run: |
          sleep 15  # Wait for the container to be up and running (give some time to start the server)
          python scripts/Prediction_req.py

      # Step 7: Stop the API container after testing
      - name: Stop and Remove API Container
        run: |
          docker stop room-occupancy-api
          docker rm room-occupancy-api
